{"version":3,"sources":["index.js"],"names":["color","value","Gem","props","className","onClick","Board","i","this","squares","board","rows","j","cols","push","renderGem","React","Component","Game","state","history","generateBoard","stepNumber","movesLeft","score","size","Array","fill","Math","floor","random","gemNo","slice","length","col","newScore","setState","concat","current","handleClick","ReactDOM","render","document","getElementById"],"mappings":"wOAIA,SAASA,EAAMC,GACd,OAAOA,GACN,KAAK,EAAG,MAAO,MACf,KAAK,EAAG,MAAO,QACf,KAAK,EAAG,MAAO,OACf,KAAK,EAAG,MAAO,UAIjB,SAASC,EAAIC,GACZ,OACC,wBAAQC,UAAW,UAAUJ,EAAMG,EAAMF,OAAQI,QAASF,EAAME,QAAhE,SACEF,EAAMF,Q,IAKJK,E,+JACL,SAAUC,GAAI,IAAD,OACZ,OACC,cAACL,EAAD,CACCD,MAAOO,KAAKL,MAAMM,QAAQF,GAC1BF,QAAS,kBAAM,EAAKF,MAAME,QAAQE,Q,oBAKrC,WAIC,IAHA,IAAMG,EAAQ,GAGNH,EAAE,EAAGA,EAAEC,KAAKL,MAAMQ,KAAMJ,IAAK,CAEpC,IADA,IAAME,EAAU,GACRG,EAAE,EAAGA,EAAEJ,KAAKL,MAAMU,KAAMD,IAC/BH,EAAQK,KAAK,8BACXN,KAAKO,UAAUR,EAAEC,KAAKL,MAAMU,KAAKD,IADZL,EAAEC,KAAKL,MAAMU,KAAKD,IAG1CF,EAAMI,KAAK,qBAAKV,UAAU,YAAf,SAAoCK,GAAJF,IAG5C,OACC,8BACEG,Q,GAzBeM,IAAMC,WAgCpBC,E,kDASL,WAAYf,GAAQ,IAAD,6BAIlB,cAAMA,IACDgB,MAAQ,CACZR,KALY,EAMZE,KALY,EAMZO,QAAS,CACR,CACCX,QAAS,EAAKY,cAAcV,MAG9BW,WAAY,EACZC,UAAW,GACXC,MAAO,GAfU,E,iDARnB,SAAcC,GAEb,IADA,IAAIf,EAAQgB,MAAMD,GAAME,KAAK,MACrBpB,EAAE,EAAGA,EAAEkB,EAAMlB,IACpBG,EAAMH,GAAKqB,KAAKC,MAAqB,EAAdD,KAAKE,SAAY,GAEzC,OAAOpB,I,yBAsBR,SAAYqB,GACX,IAAMX,EAAUZ,KAAKW,MAAMC,QAAQY,MAAM,EAAGxB,KAAKW,MAAMG,WAAa,GAE9Db,EADUW,EAAQA,EAAQa,OAAS,GACjBxB,QAAQuB,QAEhC,KAAGxB,KAAKW,MAAMI,UAAW,GAAzB,CAMA,IAHA,IAAMW,EAAMH,EAAQvB,KAAKW,MAAMN,KAGvBN,EAFIqB,KAAKC,MAAME,EAAMvB,KAAKW,MAAMN,MAEzBN,EAAE,EAAGA,IACnBE,EAAQF,EAAEC,KAAKW,MAAMN,KAAKqB,GAAOzB,GAASF,EAAE,GAAGC,KAAKW,MAAMN,KAAKqB,GAEhEzB,EAAQyB,GAAO,EAEf,IAAMC,EAAW3B,KAAKW,MAAMK,MAAM,EAGlChB,KAAK4B,SAAS,CACbhB,QAASA,EAAQiB,OAAO,CACvB,CACC5B,QAASA,KAGXa,WAAYF,EAAQa,OACpBV,UAAWf,KAAKW,MAAMI,UAAU,EAChCC,MAAOW,O,oBAIT,WAAU,IAAD,OAEFG,EADU9B,KAAKW,MAAMC,QACHZ,KAAKW,MAAMG,YAE7BE,EAAQ,UAAUhB,KAAKW,MAAMK,MAC/BD,EAAYf,KAAKW,MAAMI,UAO3B,OALCA,EADEA,EAAU,EACA,UAAUf,KAAKW,MAAMI,UAErB,0BAIZ,sBAAKnB,UAAU,OAAf,UACC,sBAAKA,UAAU,YAAf,UACC,8BAAMoB,IACN,8BAAMD,OAEP,qBAAKnB,UAAU,aAAf,SACC,cAACE,EAAD,CACCK,KAAMH,KAAKW,MAAMR,KACjBE,KAAML,KAAKW,MAAMN,KACjBJ,QAAS6B,EAAQ7B,QACjBJ,QAAS,SAAAE,GAAC,OAAI,EAAKgC,YAAYhC,e,GAlFlBS,IAAMC,WA4FzBuB,IAASC,OAAO,cAACvB,EAAD,IAAUwB,SAASC,eAAe,W","file":"static/js/main.9ba1287a.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction color(value) {\r\n\tswitch(value) {\r\n\t\tcase 1: return 'red'; break;\r\n\t\tcase 2: return 'green'; break;\r\n\t\tcase 3: return 'blue'; break;\r\n\t\tcase 4: return 'yellow'; break;\r\n\t};\r\n}\r\n\r\nfunction Gem(props) {\r\n\treturn (\r\n\t\t<button className={'square '+color(props.value)} onClick={props.onClick}>\r\n\t\t\t{props.value}\r\n\t\t</button>\r\n\t);\r\n}\r\n\r\nclass Board extends React.Component {\r\n\trenderGem(i) {\r\n\t\treturn (\r\n\t\t\t<Gem\r\n\t\t\t\tvalue={this.props.squares[i]}\r\n\t\t\t\tonClick={() => this.props.onClick(i)}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst board = [];\r\n\t\t\r\n\t\t//loop rendering gems in rows\r\n\t\tfor(let i=0; i<this.props.rows; i++) {\r\n\t\t\tconst squares = [];\r\n\t\t\tfor(let j=0; j<this.props.cols; j++) \r\n\t\t\t\tsquares.push(<div key={i*this.props.cols+j}>\r\n\t\t\t\t\t{this.renderGem(i*this.props.cols+j)}\r\n\t\t\t\t</div>);\r\n\t\t\tboard.push(<div className=\"board-row\" key={i}>{squares}</div>);\r\n\t\t}\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{board}\r\n\t\t\t</div>\r\n\t\t); \r\n\t}\r\n}\r\n\r\n\r\nclass Game extends React.Component {\r\n\tgenerateBoard(size) {\r\n\t\tlet board = Array(size).fill(null);\r\n\t\tfor(let i=0; i<size; i++) {\r\n\t\t\tboard[i] = Math.floor((Math.random()*4)+1);\t\t// generate values 1-4\r\n\t\t}\r\n\t\treturn board;\r\n\t}\r\n\t\r\n\tconstructor(props) {\r\n\t\tconst rows = 8;\r\n\t\tconst cols = 6; \r\n\t\t\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\trows: rows,\r\n\t\t\tcols: cols,\r\n\t\t\thistory: [\r\n\t\t\t\t{\r\n\t\t\t\t\tsquares: this.generateBoard(rows*cols), \r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tstepNumber: 0,\r\n\t\t\tmovesLeft: 10,\r\n\t\t\tscore: 0,\r\n\t\t};\r\n\t}\r\n\r\n\thandleClick(gemNo) {\r\n\t\tconst history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n\t\tconst current = history[history.length - 1];\r\n\t\tconst squares = current.squares.slice();\r\n\t\t\r\n\t\tif(this.state.movesLeft <1) return;\r\n\t\t\r\n\t\t//remove gem, add score, fall gems\r\n\t\tconst col = gemNo % this.state.cols;\r\n\t\tconst row = Math.floor(gemNo/this.state.cols);\t\r\n\t\t\r\n\t\tfor(let i=row; i>0; i--) {\r\n\t\t\tsquares[i*this.state.cols+col] = squares[(i-1)*this.state.cols+col];\r\n\t\t}\r\n\t\tsquares[col] = 0;\r\n\t\t\r\n\t\tconst newScore = this.state.score+1;\r\n\t\t\r\n\t\t//save move\r\n\t\tthis.setState({\r\n\t\t\thistory: history.concat([\r\n\t\t\t\t{\r\n\t\t\t\t\tsquares: squares,\r\n\t\t\t\t}\r\n\t\t\t]),\r\n\t\t\tstepNumber: history.length,\r\n\t\t\tmovesLeft: this.state.movesLeft-1,\r\n\t\t\tscore: newScore\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst history = this.state.history;\r\n\t\tconst current = history[this.state.stepNumber];\r\n\t\t\r\n\t\tconst score = \"Score: \"+this.state.score;\r\n\t\tlet movesLeft = this.state.movesLeft;\r\n\t\tif(movesLeft>0) {\r\n\t\t\tmovesLeft = \"Moves: \"+this.state.movesLeft;\r\n\t\t} else {\r\n\t\t\tmovesLeft = \"No more moves! The end.\";\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"game\">\r\n\t\t\t\t<div className=\"game-info\">\r\n\t\t\t\t\t<div>{score}</div>\r\n\t\t\t\t\t<div>{movesLeft}</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"game-board\">\r\n\t\t\t\t\t<Board\r\n\t\t\t\t\t\trows={this.state.rows}\r\n\t\t\t\t\t\tcols={this.state.cols}\r\n\t\t\t\t\t\tsquares={current.squares}\r\n\t\t\t\t\t\tonClick={i => this.handleClick(i)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n\r\nfunction calculateWinner(squares) {\r\n\tconst lines = [\r\n\t\t[0, 1, 2],\r\n\t\t[3, 4, 5],\r\n\t\t[6, 7, 8],\r\n\t\t[0, 3, 6],\r\n\t\t[1, 4, 7],\r\n\t\t[2, 5, 8],\r\n\t\t[0, 4, 8],\r\n\t\t[2, 4, 6]\r\n\t];\r\n\tfor (let i = 0; i < lines.length; i++) {\r\n\t\tconst [a, b, c] = lines[i];\r\n\t\tif (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n\t\t\treturn squares[a];\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n}\r\n"],"sourceRoot":""}