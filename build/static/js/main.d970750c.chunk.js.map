{"version":3,"sources":["index.js"],"names":["color","value","recurScore","i","Gem","props","className","onClick","Board","this","squares","board","rows","j","cols","push","renderGem","React","Component","Game","state","history","generateBoard","score","gemsCollected","stepNumber","movesLeft","size","Array","fill","Math","floor","random","row","col","gemNo","me","gemNumber","removeConnected","slice","current","length","gemsRemoved","newGemsCollected","newScore","setState","concat","colspan","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d970750c.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction color(value) {\r\n\tswitch(value) {\r\n\t\tcase 1: return 'red'; break;\r\n\t\tcase 2: return 'green'; break;\r\n\t\tcase 3: return 'blue'; break;\r\n\t\tcase 4: return 'yellow'; break;\r\n\t};\r\n}\r\n\r\nfunction recurScore(i) {\r\n\tif(i>0) return (i*5+recurScore(i-1));\r\n\telse return 0;\r\n}\r\n\r\nfunction Gem(props) {\r\n\treturn (\r\n\t\t<button className={'square '+color(props.value)} onClick={props.onClick}>\r\n\t\t\t{props.value}\r\n\t\t</button>\r\n\t);\r\n}\r\n\r\nclass Board extends React.Component {\r\n\trenderGem(i) {\r\n\t\treturn (\r\n\t\t\t<Gem\r\n\t\t\t\tvalue={this.props.squares[i]}\r\n\t\t\t\tonClick={() => this.props.onClick(i)}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst board = [];\r\n\t\t\r\n\t\t//loop rendering gems in rows\r\n\t\tfor(let i=0; i<this.props.rows; i++) {\r\n\t\t\tconst squares = [];\r\n\t\t\tfor(let j=0; j<this.props.cols; j++) \r\n\t\t\t\tsquares.push(<div key={i*this.props.cols+j}>\r\n\t\t\t\t\t{this.renderGem(i*this.props.cols+j)}\r\n\t\t\t\t</div>);\r\n\t\t\tboard.push(<div className=\"board-row\" key={i}>{squares}</div>);\r\n\t\t}\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{board}\r\n\t\t\t</div>\r\n\t\t); \r\n\t}\r\n}\r\n\r\n\r\nclass Game extends React.Component {\r\n\tgenerateBoard(size) {\r\n\t\tlet board = Array(size).fill(null);\r\n\t\tfor(let i=0; i<size; i++) {\r\n\t\t\tboard[i] = Math.floor((Math.random()*4)+1);\t\t// generate values 1-4\r\n\t\t}\r\n\t\treturn board;\r\n\t}\r\n\t\r\n\tconstructor(props) {\r\n\t\tconst rows = 8;\r\n\t\tconst cols = 6; \r\n\t\t\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\trows: rows,\r\n\t\t\tcols: cols,\r\n\t\t\thistory: [\r\n\t\t\t\t{\r\n\t\t\t\t\tsquares: this.generateBoard(rows*cols), \r\n\t\t\t\t\tscore: 0,\r\n\t\t\t\t\tgemsCollected: [0, 0, 0, 0, 0],\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tstepNumber: 0,\r\n\t\t\tmovesLeft: 100,\r\n\t\t};\r\n\t}\r\n\t\r\n\tremoveConnected(squares, row, col, gemNo) {\t\t\t// removes all connected gems of the same color\r\n\t\t//set yourself as 0\r\n\t\tconst me = squares[gemNo];\r\n\t\tlet gemNumber = 1;\r\n\t\tsquares[gemNo] = 0;\r\n\t\t\r\n\t\t//check upper one\r\n\t\t//if it has the same number, removeConnected(it)\r\n\t\tif(row>0 && squares[gemNo-this.state.cols]==me) {\r\n\t\t\tgemNumber += this.removeConnected(squares, (row-1), col, (gemNo-this.state.cols));\r\n\t\t}\r\n\t\t\r\n\t\t//remove yourself, fall column\r\n\t\tfor(let i=row; i>0; i--) {\r\n\t\t\tsquares[i*this.state.cols+col] = squares[(i-1)*this.state.cols+col];\t\t// fall gems\r\n\t\t}\r\n\t\tsquares[col] = Math.floor((Math.random()*4)+1);\t\t// new gem\r\n\t\t\r\n\t\t//check sides\r\n\t\t//if they have the same number, removeConnected(them)\r\n\t\tif(col>0 && squares[gemNo-1]==me) {\r\n\t\t\tgemNumber += this.removeConnected(squares, row, (col-1), (gemNo-1));\r\n\t\t}\r\n\t\tif(col<(this.state.cols-1) && squares[gemNo+1]==me) {\r\n\t\t\tgemNumber += this.removeConnected(squares, row, (col+1), (gemNo+1));\r\n\t\t}\r\n\t\t\r\n\t\t//check bottom one\r\n\t\t//if it has the same number, removeConnected(it)\r\n\t\tif(row<(this.state.rows-1) && squares[gemNo+this.state.cols]==me) {\r\n\t\t\tgemNumber += this.removeConnected(squares, (row+1), col, (gemNo+this.state.cols));\r\n\t\t}\r\n\t\t\r\n\t\t//return true\r\n\t\treturn gemNumber;\r\n\t}\r\n\t\r\n\thandleClick(gemNo) {\r\n\t\tconst history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n\t\tconst current = history[history.length - 1];\r\n\t\tconst squares = current.squares.slice();\r\n\t\t\r\n\t\tif(this.state.movesLeft <1) return;\r\n\t\t\r\n\t\t//remove gem, add score, fall gems\r\n\t\tconst col = gemNo % this.state.cols;\r\n\t\tconst row = Math.floor(gemNo/this.state.cols);\r\n\t\t\r\n\t\tconst color = squares[gemNo];\r\n\t\tconst gemsRemoved = this.removeConnected(squares, row, col, gemNo);\r\n\t\t\r\n\t\tconst newGemsCollected = current.gemsCollected;\r\n\t\tnewGemsCollected[0] += gemsRemoved;\t\t\t\t// add total gems collected\r\n\t\tnewGemsCollected[color] += gemsRemoved;\t\t\t// add color gems collected\r\n\t\t\r\n\t\tconst newScore = current.score+recurScore(gemsRemoved);\r\n\t\t\r\n\t\t//save move\r\n\t\tthis.setState({\r\n\t\t\thistory: history.concat([\r\n\t\t\t\t{\r\n\t\t\t\t\tsquares: squares,\r\n\t\t\t\t\tscore: newScore,\r\n\t\t\t\t\tgemsCollected: newGemsCollected,\r\n\t\t\t\t}\r\n\t\t\t]),\r\n\t\t\tstepNumber: history.length,\r\n\t\t\tmovesLeft: this.state.movesLeft-1,\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst history = this.state.history;\r\n\t\tconst current = history[this.state.stepNumber];\r\n\t\t\r\n\t\tconst score = \"Score: \"+current.score;\r\n\t\tlet movesLeft = this.state.movesLeft;\r\n\t\tif(movesLeft>0) {\r\n\t\t\tmovesLeft = \"Moves left: \"+this.state.movesLeft;\r\n\t\t} else {\r\n\t\t\tmovesLeft = \"No more moves! The end.\";\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"game\">\r\n\t\t\t\t<div className=\"game-info\">\r\n\t\t\t\t\t<div>{score}</div>\r\n\t\t\t\t\t<div className=\"moves-left\">{movesLeft}</div>\r\n\t\t\t\t\t<div className=\"gems-collected\">\r\n\t\t\t\t\t\tGems collected:\r\n\t\t\t\t\t\t<table>\r\n\t\t\t\t\t\t\t<tr><td> Red: </td><td> {current.gemsCollected[1]} </td></tr>\r\n\t\t\t\t\t\t\t<tr><td> Green: </td><td> {current.gemsCollected[2]} </td></tr>\r\n\t\t\t\t\t\t\t<tr><td> Blue: </td><td> {current.gemsCollected[3]} </td></tr>\r\n\t\t\t\t\t\t\t<tr><td> Yellow: </td><td> {current.gemsCollected[4]} </td></tr>\r\n\t\t\t\t\t\t\t<tr className=\"line\"><td colspan=\"2\"><hr/></td></tr>\r\n\t\t\t\t\t\t\t<tr><td> Total: </td><td> {current.gemsCollected[0]} </td></tr>\r\n\t\t\t\t\t\t</table>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"game-board\">\r\n\t\t\t\t\t<Board\r\n\t\t\t\t\t\trows={this.state.rows}\r\n\t\t\t\t\t\tcols={this.state.cols}\r\n\t\t\t\t\t\tsquares={current.squares}\r\n\t\t\t\t\t\tonClick={i => this.handleClick(i)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n\r\n"],"sourceRoot":""}