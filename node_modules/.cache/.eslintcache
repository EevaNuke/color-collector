[{"C:\\xampp\\htdocs\\templates\\React\\color-collector\\src\\index.js":"1"},{"size":5276,"mtime":1615455056143,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"115zh29","C:\\xampp\\htdocs\\templates\\React\\color-collector\\src\\index.js",["7","8","9","10","11","12","13","14","15"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction color(value) {\r\n\tswitch(value) {\r\n\t\tcase 1: return 'red'; break;\r\n\t\tcase 2: return 'green'; break;\r\n\t\tcase 3: return 'blue'; break;\r\n\t\tcase 4: return 'yellow'; break;\r\n\t};\r\n}\r\n\r\nfunction recurScore(i) {\r\n\tif(i>0) return (i*5+recurScore(i-1));\r\n\telse return 0;\r\n}\r\n\r\nfunction Gem(props) {\r\n\treturn (\r\n\t\t<button className={'square '+color(props.value)} onClick={props.onClick}>\r\n\t\t\t{props.value}\r\n\t\t</button>\r\n\t);\r\n}\r\n\r\nclass Board extends React.Component {\r\n\trenderGem(i) {\r\n\t\treturn (\r\n\t\t\t<Gem\r\n\t\t\t\tvalue={this.props.squares[i]}\r\n\t\t\t\tonClick={() => this.props.onClick(i)}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst board = [];\r\n\t\t\r\n\t\t//loop rendering gems in rows\r\n\t\tfor(let i=0; i<this.props.rows; i++) {\r\n\t\t\tconst squares = [];\r\n\t\t\tfor(let j=0; j<this.props.cols; j++) \r\n\t\t\t\tsquares.push(<div key={i*this.props.cols+j}>\r\n\t\t\t\t\t{this.renderGem(i*this.props.cols+j)}\r\n\t\t\t\t</div>);\r\n\t\t\tboard.push(<div className=\"board-row\" key={i}>{squares}</div>);\r\n\t\t}\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{board}\r\n\t\t\t</div>\r\n\t\t); \r\n\t}\r\n}\r\n\r\n\r\nclass Game extends React.Component {\r\n\tgenerateBoard(size) {\r\n\t\tlet board = Array(size).fill(null);\r\n\t\tfor(let i=0; i<size; i++) {\r\n\t\t\tboard[i] = Math.floor((Math.random()*4)+1);\t\t// generate values 1-4\r\n\t\t}\r\n\t\treturn board;\r\n\t}\r\n\t\r\n\tconstructor(props) {\r\n\t\tconst rows = 8;\r\n\t\tconst cols = 6; \r\n\t\t\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\trows: rows,\r\n\t\t\tcols: cols,\r\n\t\t\thistory: [\r\n\t\t\t\t{\r\n\t\t\t\t\tsquares: this.generateBoard(rows*cols), \r\n\t\t\t\t\tscore: 0,\r\n\t\t\t\t\tgemsCollected: [0, 0, 0, 0, 0],\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tstepNumber: 0,\r\n\t\t\tmovesLeft: 100,\r\n\t\t};\r\n\t}\r\n\t\r\n\tremoveConnected(squares, row, col, gemNo) {\t\t\t// removes all connected gems of the same color\r\n\t\t//set yourself as 0\r\n\t\tconst me = squares[gemNo];\r\n\t\tlet gemNumber = 1;\r\n\t\tsquares[gemNo] = 0;\r\n\t\t\r\n\t\t//check upper one\r\n\t\t//if it has the same number, removeConnected(it)\r\n\t\tif(row>0 && squares[gemNo-this.state.cols]==me) {\r\n\t\t\tgemNumber += this.removeConnected(squares, (row-1), col, (gemNo-this.state.cols));\r\n\t\t}\r\n\t\t\r\n\t\t//remove yourself, fall column\r\n\t\tfor(let i=row; i>0; i--) {\r\n\t\t\tsquares[i*this.state.cols+col] = squares[(i-1)*this.state.cols+col];\t\t// fall gems\r\n\t\t}\r\n\t\tsquares[col] = Math.floor((Math.random()*4)+1);\t\t// new gem\r\n\t\t\r\n\t\t//check sides\r\n\t\t//if they have the same number, removeConnected(them)\r\n\t\tif(col>0 && squares[gemNo-1]==me) {\r\n\t\t\tgemNumber += this.removeConnected(squares, row, (col-1), (gemNo-1));\r\n\t\t}\r\n\t\tif(col<(this.state.cols-1) && squares[gemNo+1]==me) {\r\n\t\t\tgemNumber += this.removeConnected(squares, row, (col+1), (gemNo+1));\r\n\t\t}\r\n\t\t\r\n\t\t//check bottom one\r\n\t\t//if it has the same number, removeConnected(it)\r\n\t\tif(row<(this.state.rows-1) && squares[gemNo+this.state.cols]==me) {\r\n\t\t\tgemNumber += this.removeConnected(squares, (row+1), col, (gemNo+this.state.cols));\r\n\t\t}\r\n\t\t\r\n\t\t//return true\r\n\t\treturn gemNumber;\r\n\t}\r\n\t\r\n\thandleClick(gemNo) {\r\n\t\tconst history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n\t\tconst current = history[history.length - 1];\r\n\t\tconst squares = current.squares.slice();\r\n\t\t\r\n\t\tif(this.state.movesLeft <1) return;\r\n\t\t\r\n\t\t//remove gem, add score, fall gems\r\n\t\tconst col = gemNo % this.state.cols;\r\n\t\tconst row = Math.floor(gemNo/this.state.cols);\r\n\t\t\r\n\t\tconst color = squares[gemNo];\r\n\t\tconst gemsRemoved = this.removeConnected(squares, row, col, gemNo);\r\n\t\t\r\n\t\tconst newGemsCollected = current.gemsCollected;\r\n\t\tnewGemsCollected[0] += gemsRemoved;\t\t\t\t// add total gems collected\r\n\t\tnewGemsCollected[color] += gemsRemoved;\t\t\t// add color gems collected\r\n\t\t\r\n\t\tconst newScore = current.score+recurScore(gemsRemoved);\r\n\t\t\r\n\t\t//save move\r\n\t\tthis.setState({\r\n\t\t\thistory: history.concat([\r\n\t\t\t\t{\r\n\t\t\t\t\tsquares: squares,\r\n\t\t\t\t\tscore: newScore,\r\n\t\t\t\t\tgemsCollected: newGemsCollected,\r\n\t\t\t\t}\r\n\t\t\t]),\r\n\t\t\tstepNumber: history.length,\r\n\t\t\tmovesLeft: this.state.movesLeft-1,\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst history = this.state.history;\r\n\t\tconst current = history[this.state.stepNumber];\r\n\t\t\r\n\t\tconst score = \"Score: \"+current.score;\r\n\t\tlet movesLeft = this.state.movesLeft;\r\n\t\tif(movesLeft>0) {\r\n\t\t\tmovesLeft = \"Moves left: \"+this.state.movesLeft;\r\n\t\t} else {\r\n\t\t\tmovesLeft = \"No more moves! The end.\";\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"game\">\r\n\t\t\t\t<div className=\"game-info\">\r\n\t\t\t\t\t<div>{score}</div>\r\n\t\t\t\t\t<div className=\"moves-left\">{movesLeft}</div>\r\n\t\t\t\t\t<div className=\"gems-collected\">\r\n\t\t\t\t\t\tGems collected:\r\n\t\t\t\t\t\t<table>\r\n\t\t\t\t\t\t\t<tr><td> Red: </td><td> {current.gemsCollected[1]} </td></tr>\r\n\t\t\t\t\t\t\t<tr><td> Green: </td><td> {current.gemsCollected[2]} </td></tr>\r\n\t\t\t\t\t\t\t<tr><td> Blue: </td><td> {current.gemsCollected[3]} </td></tr>\r\n\t\t\t\t\t\t\t<tr><td> Yellow: </td><td> {current.gemsCollected[4]} </td></tr>\r\n\t\t\t\t\t\t\t<tr className=\"line\"><td colspan=\"2\"><hr/></td></tr>\r\n\t\t\t\t\t\t\t<tr><td> Total: </td><td> {current.gemsCollected[0]} </td></tr>\r\n\t\t\t\t\t\t</table>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"game-board\">\r\n\t\t\t\t\t<Board\r\n\t\t\t\t\t\trows={this.state.rows}\r\n\t\t\t\t\t\tcols={this.state.cols}\r\n\t\t\t\t\t\tsquares={current.squares}\r\n\t\t\t\t\t\tonClick={i => this.handleClick(i)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n\r\n",{"ruleId":"16","severity":1,"message":"17","line":6,"column":2,"nodeType":"18","messageId":"19","endLine":11,"endColumn":3},{"ruleId":"20","severity":1,"message":"21","line":7,"column":25,"nodeType":"22","messageId":"23","endLine":7,"endColumn":31},{"ruleId":"20","severity":1,"message":"21","line":8,"column":27,"nodeType":"22","messageId":"23","endLine":8,"endColumn":33},{"ruleId":"20","severity":1,"message":"21","line":9,"column":26,"nodeType":"22","messageId":"23","endLine":9,"endColumn":32},{"ruleId":"20","severity":1,"message":"21","line":10,"column":28,"nodeType":"22","messageId":"23","endLine":10,"endColumn":34},{"ruleId":"24","severity":1,"message":"25","line":96,"column":45,"nodeType":"26","messageId":"27","endLine":96,"endColumn":47},{"ruleId":"24","severity":1,"message":"25","line":108,"column":31,"nodeType":"26","messageId":"27","endLine":108,"endColumn":33},{"ruleId":"24","severity":1,"message":"25","line":111,"column":49,"nodeType":"26","messageId":"27","endLine":111,"endColumn":51},{"ruleId":"24","severity":1,"message":"25","line":117,"column":63,"nodeType":"26","messageId":"27","endLine":117,"endColumn":65},"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]